/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.eulen.actividades.service.service.base;

import aQute.bnd.annotation.ProviderType;

import com.eulen.actividades.service.model.ActividadesEspeciales;
import com.eulen.actividades.service.service.ActividadesEspecialesLocalService;
import com.eulen.actividades.service.service.persistence.ActividadesEspecialesPersistence;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.dao.db.DB;
import com.liferay.portal.kernel.dao.db.DBManagerUtil;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.ActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DefaultActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.IndexableActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.model.PersistedModel;
import com.liferay.portal.kernel.module.framework.service.IdentifiableOSGiService;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.service.BaseLocalServiceImpl;
import com.liferay.portal.kernel.service.PersistedModelLocalServiceRegistry;
import com.liferay.portal.kernel.service.persistence.ClassNamePersistence;
import com.liferay.portal.kernel.service.persistence.UserPersistence;
import com.liferay.portal.kernel.transaction.Transactional;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.spring.extender.service.ServiceReference;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the actividades especiales local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link com.eulen.actividades.service.service.impl.ActividadesEspecialesLocalServiceImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see com.eulen.actividades.service.service.impl.ActividadesEspecialesLocalServiceImpl
 * @see com.eulen.actividades.service.service.ActividadesEspecialesLocalServiceUtil
 * @generated
 */
@ProviderType
public abstract class ActividadesEspecialesLocalServiceBaseImpl
	extends BaseLocalServiceImpl implements ActividadesEspecialesLocalService,
		IdentifiableOSGiService {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link com.eulen.actividades.service.service.ActividadesEspecialesLocalServiceUtil} to access the actividades especiales local service.
	 */

	/**
	 * Adds the actividades especiales to the database. Also notifies the appropriate model listeners.
	 *
	 * @param actividadesEspeciales the actividades especiales
	 * @return the actividades especiales that was added
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public ActividadesEspeciales addActividadesEspeciales(
		ActividadesEspeciales actividadesEspeciales) {
		actividadesEspeciales.setNew(true);

		return actividadesEspecialesPersistence.update(actividadesEspeciales);
	}

	/**
	 * Creates a new actividades especiales with the primary key. Does not add the actividades especiales to the database.
	 *
	 * @param actividadId the primary key for the new actividades especiales
	 * @return the new actividades especiales
	 */
	@Override
	@Transactional(enabled = false)
	public ActividadesEspeciales createActividadesEspeciales(long actividadId) {
		return actividadesEspecialesPersistence.create(actividadId);
	}

	/**
	 * Deletes the actividades especiales with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param actividadId the primary key of the actividades especiales
	 * @return the actividades especiales that was removed
	 * @throws PortalException if a actividades especiales with the primary key could not be found
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public ActividadesEspeciales deleteActividadesEspeciales(long actividadId)
		throws PortalException {
		return actividadesEspecialesPersistence.remove(actividadId);
	}

	/**
	 * Deletes the actividades especiales from the database. Also notifies the appropriate model listeners.
	 *
	 * @param actividadesEspeciales the actividades especiales
	 * @return the actividades especiales that was removed
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public ActividadesEspeciales deleteActividadesEspeciales(
		ActividadesEspeciales actividadesEspeciales) {
		return actividadesEspecialesPersistence.remove(actividadesEspeciales);
	}

	@Override
	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(ActividadesEspeciales.class,
			clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery) {
		return actividadesEspecialesPersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.eulen.actividades.service.model.impl.ActividadesEspecialesModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery, int start,
		int end) {
		return actividadesEspecialesPersistence.findWithDynamicQuery(dynamicQuery,
			start, end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.eulen.actividades.service.model.impl.ActividadesEspecialesModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery, int start,
		int end, OrderByComparator<T> orderByComparator) {
		return actividadesEspecialesPersistence.findWithDynamicQuery(dynamicQuery,
			start, end, orderByComparator);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery) {
		return actividadesEspecialesPersistence.countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @param projection the projection to apply to the query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery,
		Projection projection) {
		return actividadesEspecialesPersistence.countWithDynamicQuery(dynamicQuery,
			projection);
	}

	@Override
	public ActividadesEspeciales fetchActividadesEspeciales(long actividadId) {
		return actividadesEspecialesPersistence.fetchByPrimaryKey(actividadId);
	}

	/**
	 * Returns the actividades especiales matching the UUID and group.
	 *
	 * @param uuid the actividades especiales's UUID
	 * @param groupId the primary key of the group
	 * @return the matching actividades especiales, or <code>null</code> if a matching actividades especiales could not be found
	 */
	@Override
	public ActividadesEspeciales fetchActividadesEspecialesByUuidAndGroupId(
		String uuid, long groupId) {
		return actividadesEspecialesPersistence.fetchByUUID_G(uuid, groupId);
	}

	/**
	 * Returns the actividades especiales with the primary key.
	 *
	 * @param actividadId the primary key of the actividades especiales
	 * @return the actividades especiales
	 * @throws PortalException if a actividades especiales with the primary key could not be found
	 */
	@Override
	public ActividadesEspeciales getActividadesEspeciales(long actividadId)
		throws PortalException {
		return actividadesEspecialesPersistence.findByPrimaryKey(actividadId);
	}

	@Override
	public ActionableDynamicQuery getActionableDynamicQuery() {
		ActionableDynamicQuery actionableDynamicQuery = new DefaultActionableDynamicQuery();

		actionableDynamicQuery.setBaseLocalService(actividadesEspecialesLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(ActividadesEspeciales.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName("actividadId");

		return actionableDynamicQuery;
	}

	@Override
	public IndexableActionableDynamicQuery getIndexableActionableDynamicQuery() {
		IndexableActionableDynamicQuery indexableActionableDynamicQuery = new IndexableActionableDynamicQuery();

		indexableActionableDynamicQuery.setBaseLocalService(actividadesEspecialesLocalService);
		indexableActionableDynamicQuery.setClassLoader(getClassLoader());
		indexableActionableDynamicQuery.setModelClass(ActividadesEspeciales.class);

		indexableActionableDynamicQuery.setPrimaryKeyPropertyName("actividadId");

		return indexableActionableDynamicQuery;
	}

	protected void initActionableDynamicQuery(
		ActionableDynamicQuery actionableDynamicQuery) {
		actionableDynamicQuery.setBaseLocalService(actividadesEspecialesLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(ActividadesEspeciales.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName("actividadId");
	}

	/**
	 * @throws PortalException
	 */
	@Override
	public PersistedModel deletePersistedModel(PersistedModel persistedModel)
		throws PortalException {
		return actividadesEspecialesLocalService.deleteActividadesEspeciales((ActividadesEspeciales)persistedModel);
	}

	@Override
	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException {
		return actividadesEspecialesPersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns the actividades especiales matching the UUID and group.
	 *
	 * @param uuid the actividades especiales's UUID
	 * @param groupId the primary key of the group
	 * @return the matching actividades especiales
	 * @throws PortalException if a matching actividades especiales could not be found
	 */
	@Override
	public ActividadesEspeciales getActividadesEspecialesByUuidAndGroupId(
		String uuid, long groupId) throws PortalException {
		return actividadesEspecialesPersistence.findByUUID_G(uuid, groupId);
	}

	/**
	 * Returns a range of all the actividades especialeses.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.eulen.actividades.service.model.impl.ActividadesEspecialesModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param start the lower bound of the range of actividades especialeses
	 * @param end the upper bound of the range of actividades especialeses (not inclusive)
	 * @return the range of actividades especialeses
	 */
	@Override
	public List<ActividadesEspeciales> getActividadesEspecialeses(int start,
		int end) {
		return actividadesEspecialesPersistence.findAll(start, end);
	}

	/**
	 * Returns the number of actividades especialeses.
	 *
	 * @return the number of actividades especialeses
	 */
	@Override
	public int getActividadesEspecialesesCount() {
		return actividadesEspecialesPersistence.countAll();
	}

	/**
	 * Updates the actividades especiales in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param actividadesEspeciales the actividades especiales
	 * @return the actividades especiales that was updated
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public ActividadesEspeciales updateActividadesEspeciales(
		ActividadesEspeciales actividadesEspeciales) {
		return actividadesEspecialesPersistence.update(actividadesEspeciales);
	}

	/**
	 * Returns the actividades especiales local service.
	 *
	 * @return the actividades especiales local service
	 */
	public ActividadesEspecialesLocalService getActividadesEspecialesLocalService() {
		return actividadesEspecialesLocalService;
	}

	/**
	 * Sets the actividades especiales local service.
	 *
	 * @param actividadesEspecialesLocalService the actividades especiales local service
	 */
	public void setActividadesEspecialesLocalService(
		ActividadesEspecialesLocalService actividadesEspecialesLocalService) {
		this.actividadesEspecialesLocalService = actividadesEspecialesLocalService;
	}

	/**
	 * Returns the actividades especiales persistence.
	 *
	 * @return the actividades especiales persistence
	 */
	public ActividadesEspecialesPersistence getActividadesEspecialesPersistence() {
		return actividadesEspecialesPersistence;
	}

	/**
	 * Sets the actividades especiales persistence.
	 *
	 * @param actividadesEspecialesPersistence the actividades especiales persistence
	 */
	public void setActividadesEspecialesPersistence(
		ActividadesEspecialesPersistence actividadesEspecialesPersistence) {
		this.actividadesEspecialesPersistence = actividadesEspecialesPersistence;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public com.liferay.counter.kernel.service.CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(
		com.liferay.counter.kernel.service.CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the class name local service.
	 *
	 * @return the class name local service
	 */
	public com.liferay.portal.kernel.service.ClassNameLocalService getClassNameLocalService() {
		return classNameLocalService;
	}

	/**
	 * Sets the class name local service.
	 *
	 * @param classNameLocalService the class name local service
	 */
	public void setClassNameLocalService(
		com.liferay.portal.kernel.service.ClassNameLocalService classNameLocalService) {
		this.classNameLocalService = classNameLocalService;
	}

	/**
	 * Returns the class name persistence.
	 *
	 * @return the class name persistence
	 */
	public ClassNamePersistence getClassNamePersistence() {
		return classNamePersistence;
	}

	/**
	 * Sets the class name persistence.
	 *
	 * @param classNamePersistence the class name persistence
	 */
	public void setClassNamePersistence(
		ClassNamePersistence classNamePersistence) {
		this.classNamePersistence = classNamePersistence;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public com.liferay.portal.kernel.service.ResourceLocalService getResourceLocalService() {
		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		com.liferay.portal.kernel.service.ResourceLocalService resourceLocalService) {
		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public com.liferay.portal.kernel.service.UserLocalService getUserLocalService() {
		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(
		com.liferay.portal.kernel.service.UserLocalService userLocalService) {
		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	public void afterPropertiesSet() {
		persistedModelLocalServiceRegistry.register("com.eulen.actividades.service.model.ActividadesEspeciales",
			actividadesEspecialesLocalService);
	}

	public void destroy() {
		persistedModelLocalServiceRegistry.unregister(
			"com.eulen.actividades.service.model.ActividadesEspeciales");
	}

	/**
	 * Returns the OSGi service identifier.
	 *
	 * @return the OSGi service identifier
	 */
	@Override
	public String getOSGiServiceIdentifier() {
		return ActividadesEspecialesLocalService.class.getName();
	}

	protected Class<?> getModelClass() {
		return ActividadesEspeciales.class;
	}

	protected String getModelClassName() {
		return ActividadesEspeciales.class.getName();
	}

	/**
	 * Performs a SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) {
		try {
			DataSource dataSource = actividadesEspecialesPersistence.getDataSource();

			DB db = DBManagerUtil.getDB();

			sql = db.buildSQL(sql);
			sql = PortalUtil.transformSQL(sql);

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = ActividadesEspecialesLocalService.class)
	protected ActividadesEspecialesLocalService actividadesEspecialesLocalService;
	@BeanReference(type = ActividadesEspecialesPersistence.class)
	protected ActividadesEspecialesPersistence actividadesEspecialesPersistence;
	@ServiceReference(type = com.liferay.counter.kernel.service.CounterLocalService.class)
	protected com.liferay.counter.kernel.service.CounterLocalService counterLocalService;
	@ServiceReference(type = com.liferay.portal.kernel.service.ClassNameLocalService.class)
	protected com.liferay.portal.kernel.service.ClassNameLocalService classNameLocalService;
	@ServiceReference(type = ClassNamePersistence.class)
	protected ClassNamePersistence classNamePersistence;
	@ServiceReference(type = com.liferay.portal.kernel.service.ResourceLocalService.class)
	protected com.liferay.portal.kernel.service.ResourceLocalService resourceLocalService;
	@ServiceReference(type = com.liferay.portal.kernel.service.UserLocalService.class)
	protected com.liferay.portal.kernel.service.UserLocalService userLocalService;
	@ServiceReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
	@ServiceReference(type = PersistedModelLocalServiceRegistry.class)
	protected PersistedModelLocalServiceRegistry persistedModelLocalServiceRegistry;
}